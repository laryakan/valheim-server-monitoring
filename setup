#!/bin/bash
# author: laryakan, date 2021/03/12
# Basic env init
CWD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
if [ ! -f "$CWD/.env" ]
then
  cp "$CWD/.env.dist" "$CWD/.env"
fi
source "$CWD/.env"

# VSS Setup menu
# Colors
red='\e[31m'
green='\e[32m'
blue='\e[94m'
cyan='\e[36m'
yellow='\e[93m'
magenta='\e[35m'
clear='\e[0m'
ColorRed(){
	echo -ne $red$1$clear
}
ColorGreen(){
	echo -ne $green$1$clear
}
ColorBlue(){
	echo -ne $blue$1$clear
}
ColorCyan(){
	echo -ne $cyan$1$clear
}
ColorYellow(){
	echo -ne $yellow$1$clear
}
ColorMagenta(){
	echo -ne $magenta$1$clear
}

# get the setup status
# Setup service with conf values
function setup_status(){
	echo -ne "
======== VSS setup completion =========
"
if [ ! -z $VALSERVERPID ];then echo -e "Valheim Server $(ColorGreen online)";else echo -e "Valheim Server $(ColorRed offline)";fi
if [ ! -z $(pgrep $(basename $VSSLOGFILTER)) ];then echo -e "VSS log filter $(ColorGreen running)";else echo -e "VSS log filter $(ColorRed stopped) or $(ColorRed 'not piped!')";fi
if [ "$VHSERVERWORLD" != 'server.world' ];then echo -e "Custom launcher world $(ColorGreen 'is set')";else echo -e "Custom launcher world $(ColorRed 'has default value')";fi
if [ -e '/etc/logrotate.d/valheim' ];then echo -e "logrotate $(ColorGreen set)";else echo -e "logrotate $(ColorRed 'not set')";fi
if [ "$WEBHOOKTOKEN" != 'webhookToken' ];then echo -e "$(ColorMagenta 'Discord') webhook $(ColorGreen ready)";else echo -e "$(ColorMagenta 'Discord') webhook $(ColorRed 'not ready')";fi
if [ ! -z "$STATUSMESSAGEID" ];then echo -e "$(ColorMagenta 'Discord') webhook $(ColorGreen 'can update status')";else echo -e "$(ColorMagenta 'Discord') webhook $(ColorRed 'cannot update status')";fi
if [ "$SENDLASTLOGS" -gt 0 ];then echo -e "$(ColorMagenta 'Discord') webhook $(ColorGreen 'will send logs')";else echo -e "$(ColorMagenta 'Discord') webhook $(ColorYellow 'will not send log')";fi
if [ ! -z $(crontab -l 2>/dev/null | grep "$WEBHOOKUPDATE" | head -1|cut -d' ' -f6) ];then echo -e "Webhook crontab $(ColorGreen 'is set')";else echo -e "Webhook crontab $(ColorRed 'not set')";fi
if [ -e "/etc/systemd/system/$VHSERVERSERVICENAME" ];then echo -e "$VHSERVERSERVICENAME is $(ColorGreen 'present') in system";else echo -e  "$VHSERVERSERVICENAME is $(ColorRed 'missing') in system";fi
if [ -e "/etc/systemd/system/$VSSHTTPSERVICENAME" ];then echo -e "$VSSHTTPSERVICENAME is $(ColorGreen 'present') in system";else echo -e  "$VSSHTTPSERVICENAME is $(ColorRed 'missing') in system";fi

echo ""
echo "--Ports--"
echo -e "Please, run \e[1msudo ufw status\e[0m (firewall) to see if these ports are open:"
echo -e "- $VHSERVERPORT to $(($VHSERVERPORT+2))/tcp/udp (Valheim server)"
echo -e "- $STATUSPORT/tcp (VSS over HTTP)"
echo "======================================="
}

# env conf value changing function
function replace_env_value() {
  ISNUMorEMPTY="$(echo "$2"|grep -E '^\-?[0-9]?\.?[0-9]+$'|wc -l)"
  if [[ $ISNUMorEMPTY -eq 0 ]]
  then 
  	cat "$CWD/.env"|grep "$1="|xargs -I {} -t -d'\n' sed -i "s[{}[$1=\"$2\"[ig" "$CWD/.env"
  else
	cat "$CWD/.env"|grep "$1="|xargs -I {} -t -d'\n' sed -i "s[{}[$1=$2[ig" "$CWD/.env"
  fi
  
  source "$CWD/.env"
}

# param1=value_label, param2=value_variable_in_.env
function setup_value_prompt() {
  echo ""
	echo "**$1**"
	echo -e "current value : ${!2}"
	echo "enter new value ('n' to leave unchanged) :"
	read NEWVALUE
	if [ "$NEWVALUE" = 'n' ];then
	  echo "value unchanged"
	  return
	fi
	replace_env_value "$2" "$NEWVALUE"
	echo "new value set : ${!2}"
	echo ""
}

# trying autoconfig
function auto_conf(){
	# Searching for Valheim server dir
	# Searching for running Valheim server to complete
	VHSERVERPROCESS=$(ps -auxwe|grep -v grep|grep valheim_server)
	# if process found
	if [ ! -z "$VHSERVERPROCESS" ]
	then
		# get the user who will execute services
		FUSERSERVICE=$(echo $VHSERVERPROCESS|cut -d' ' -f1)
		replace_env_value 'USERSERVICE' "$FUSERSERVICE"
		# get path
		FVHSERVERDIR=$(echo $VHSERVERPROCESS|sed -n -e 's/^.*PWD=//p'|cut -d' ' -f1)
		replace_env_value 'VHSERVERDIR' "$FVHSERVERDIR"
		# get Valheim server port
		FVHSERVERPORT=$(echo $VHSERVERPROCESS|sed -n -e 's/^.*-port //p'|cut -d' ' -f1)
		replace_env_value 'VHSERVERPORT' $FVHSERVERPORT
		# get Your server name
		FVHSERVERNAME=$(echo $VHSERVERPROCESS|sed -n -e 's/^.*-name //p'|cut -d' ' -f1)
		replace_env_value 'VHSERVERNAME' "$FVHSERVERNAME"
		# get you server world name
		FVHSERVERWORLD=$(echo $VHSERVERPROCESS|sed -n -e 's/^.*-world //p'|cut -d' ' -f1)
		replace_env_value 'VHSERVERWORLD' "$FVHSERVERWORLD"
		# get Your server password
		FVHSERVERPASSWD=$(echo $VHSERVERPROCESS|sed -n -e 's/^.*-password //p'|cut -d' ' -f1)
		replace_env_value 'VHSERVERPASSWD' "$FVHSERVERPASSWD"

		echo -ne "
		$(ColorGreen 'auto-conf done, please stop your Valheim server now.') 
		$(ColorGreen 'If you ve set a service, delete it before using our.')
		"
	fi
}

# Setup cron
function set_cron() {
	# Check a and old cron exists
	OLDLINE="$( crontab -l 2>/dev/null | grep $WEBHOOKUPDATE )"
	if [ ! -z "$OLDLINE" ]
	then
		# remove line
		crontab -l 2>/dev/null | grep -v "$WEBHOOKUPDATE" | crontab -
	fi
	if [ $CRONTABWEBHOOKFREQ -gt 0 ]
	then
		# add new one
		(crontab -l 2>/dev/null ; echo "*/$CRONTABWEBHOOKFREQ * * * * $WEBHOOKUPDATE") | crontab -
	fi
	echo "$(ColorGreen 'crontab updated, you can check it with \*crontab -l\*, edit with \*crontab -e\*')"
}

# Setup service with conf values
function set_service(){
	SERVICENAME="$1"
	cp "$CWD/examples/$SERVICENAME" "$CWD/systemd/$SERVICENAME"

	# steam real exec user
	sed -i "s[###EXECUSER###[$USERSERVICE[g" "$CWD/systemd/$SERVICENAME"

	if [ "$SERVICENAME" = "$VHSERVERSERVICENAME" ]
	then
	# set steamcmd path for server update
	sed -i "s[###STEAMCMDPATH###[$STEAMCMD[g" "$CWD/systemd/$SERVICENAME"
	# important : set launcher path
	sed -i "s[###VHSERVERLAUNCHER###[$VHSERVERLAUNCHER[g" "$CWD/systemd/$SERVICENAME"
	# important : set launcher dir
	sed -i "s[###VHSERVERLAUNCHERDIR###[$VHSERVERLAUNCHERDIR[g" "$CWD/systemd/$SERVICENAME"
	# important : set server dir
	sed -i "s[###VHSERVERDIR###[$VHSERVERDIR[g" "$CWD/systemd/$SERVICENAME"
	fi

	if [ "$SERVICENAME" = "$VSSHTTPSERVICENAME" ]
	then
	# set steamcmd path for server update
	sed -i "s[###VSSHTTP###[$VSSHTTP[g" "$CWD/systemd/$SERVICENAME"
	# set valheim server dir for server update
	sed -i "s[###VSSHTTPDIR###[$VSSHTTPDIR[g" "$CWD/systemd/$SERVICENAME"
	fi

	if [ "$SERVICENAME" = "$VSSPIPESERVICENAME" ]
	then
	# set steamcmd path for server update
	sed -i "s[###VSSPIPE###[$VSSPIPE[g" "$CWD/systemd/$SERVICENAME"
	# set valheim server dir for server update
	sed -i "s[###VSSPIPEDIR###[$VSSPIPEDIR[g" "$CWD/systemd/$SERVICENAME"
	fi
	# binding with systemd
	sudo ln -s "$CWD/systemd/$SERVICENAME" "/etc/systemd/system/$SERVICENAME"
	NOSUDO=$?
	# missing sudo fallback
	if [ $NOSUDO -gt 0 ]
	then 
		echo -e "$(ColorRed 'Since sudo has failed, here s the command we tried : ')"
		echo -e "sudo ln -s \"$CWD/systemd/$SERVICENAME\" \"/etc/systemd/system/$SERVICENAME\""
		echo -e "sudo systemctl daemon-reload"
		echo -e "sudo systemctl enable $SERVICENAME"
		echo -e "sudo systemctl start $SERVICENAME"
	else 
		# service relaod
		sudo systemctl daemon-reload
		# start at reboot
		sudo systemctl enable $SERVICENAME
		# start now
		sudo systemctl start $SERVICENAME
		echo -e "$(ColorGreen 'service set and started')"
	fi
	echo -e "if the service is set, you can auto-start after reboot using \"systemctl enable $SERVICENAME\""
}

function uninstall_service(){
	SERVICENAME="$1"
	sudo systemctl stop "$SERVICENAME"
	sudo systemctl disable "$SERVICENAME"
	sudo rm "/etc/systemd/system/$SERVICENAME"
	sudo systemctl daemon-reload
	sudo systemctl reset-failed
	rm "$CWD/systemd/$SERVICENAME"
}

# Setup service with conf values, setup is $1=1; setdown is $1=2
function set_logrotate(){
	cp "$CWD/examples/valheim.logrotate" "$CWD/systemd/valheim.logrotate"

	# set real path
	sed -i "s[###VALHEIMSERVERLOGPATH###[${VALHEIMSERVERLOGPATH}[g" "$CWD/systemd/valheim.logrotate"
	sudo ln -s "$CWD/systemd/valheim.logrotate" "/etc/logrotate.d/valheim"
	NOSUDO=$?
	# missing sudo fallback
	if [ $NOSUDO -gt 0 ]
	then 
		echo -e "$(ColorRed 'Since sudo has failed, here s the command we tried : ')";
		echo -e "sudo ln -s \"$CWD/systemd/valheim.logrotate\" \"/etc/logrotate.d/valheim\"";
	else 
		echo -e "$(ColorGreen 'logrotate set')"
	fi
}

# WIP - auto-setup
function auto_setup(){
	echo -e "Not yet implemented"
}

# new menus
vss_header(){
echo -ne "
---------------------------------------
===== Valheim Server Status - VSS =====
"
setup_status
}

discord_menu(){
vss_header
echo -ne "
*** $(ColorMagenta 'Discord') menu ***
$(ColorRed 'Remember to first create your webhook on Discord and activate developer mode (in appereance menu)')
$(ColorGreen '1)') setup current $(ColorMagenta 'Discord') webhook URL
$(ColorGreen '2)') setup 'how many' wanted last logs on your $(ColorMagenta 'Discord') channel
$(ColorGreen '3)') force $(ColorMagenta 'Discord') webhook update
$(ColorGreen '4)') setup current $(ColorMagenta 'Discord') webhook status message id
$(ColorGreen '5)') setup current $(ColorMagenta 'Discord') webhook last logs message id
$(ColorGreen '6)') enable or disable realtime in-game event update on your webhook (1 or 0)
$(ColorGreen '7)') setup $(ColorMagenta 'Discord') webhook update cron frequency (Valheim Server heartbeat)
$(ColorGreen '8)') remove webhook crontab (no more auto-update)

$(ColorGreen '0)') return to previous menu
$(ColorGreen 'CTRL+C)') quit
$(ColorBlue 'You can scroll up to see previous screens')
$(ColorBlue 'choose an option:') "
mkdir -p "$CWD/systemd"
        read a
        case $a in
			1) setup_value_prompt "what's your $(ColorMagenta 'Discord') webhook url ?" 'WEBHOOKURL' ; clear ; discord_menu ;;
	        2) setup_value_prompt "how many logs do you want on your $(ColorMagenta 'Discord') ? set '0' if you dont want any" 'SENDLASTLOGS' ; clear ; discord_menu ;;
	        3) "$CWD/discord/update" ; clear ; discord_menu ;;
	        4) setup_value_prompt "what's the $(ColorMagenta 'Discord') webhook status message id ?" 'STATUSMESSAGEID' ; clear ; discord_menu ;;
	        5) setup_value_prompt "what's the $(ColorMagenta 'Discord') webhook 'last logs' message id ?" 'LASTLOGMESSAGEID' ; clear ; discord_menu ;;
			6) setup_value_prompt 'do you want the webhook messages to auto-update at each in-game event ? (set "1" for true, "0" for false)' 'EVENTREALTIME' ; clear ; discord_menu ;;
			7) setup_value_prompt "at which frequency do you want your $(ColorMagenta 'Discord') webhook to send message (in minutes) ? set '0' if you dont want an auto-update cron" 'CRONTABWEBHOOKFREQ' ; set_cron ; sleep 2 ; clear ; discord_menu ;;
			8) replace_env_value 'CRONTABWEBHOOKFREQ' 0 ; set_cron ; sleep 2 ; clear ; discord_menu ;;
			
		0) clear ; new_menu ;;
		*) echo -e $red"Wrong option."$clear; WrongCommand;;
        esac
}

# new menus
launcher_menu(){
vss_header
echo -ne "
*** Valheim Server Launcher menu ***
$(ColorGreen '1)') $(ColorYellow 'auto-conf custom launcher') if your server is running! this will set 2),3),4),5),6)
$(ColorGreen '2)') setup current Valheim server directory
$(ColorGreen '3)') setup wanted Valheim server listening port
$(ColorGreen '4)') setup wanted Valheim server name
$(ColorGreen '5)') setup wanted Valheim server world name
$(ColorGreen '6)') setup wanted Valheim server password
$(ColorGreen '7)') $(ColorRed 'sudo required') add and activate valheim-server.service (your server through service) $(ColorRed 'stop you server first !')
$(ColorGreen '8)') $(ColorRed 'sudo required') remove valheim-server.service

$(ColorGreen '0)') return to previous menu
$(ColorGreen 'CTRL+C)') quit
$(ColorBlue 'You can scroll up to see previous screens')
$(ColorBlue 'choose an option:') "
mkdir -p "$CWD/systemd"
        read a
        case $a in
			1) auto_conf ; clear ; launcher_menu ;;
			2) setup_value_prompt 'where is located your dedicated server ?' 'VHSERVERDIR' ; clear ; launcher_menu ;;
			3) setup_value_prompt 'on which port do you want your server to listen (default: 2456) ?' 'VHSERVERPORT' ; clear ; launcher_menu ;;
	        4) setup_value_prompt "what is your $(ColorYellow 'current') or $(ColorCyan 'wanted')  Valheim server name ?" 'VHSERVERNAME' ; clear ; launcher_menu ;;
	        5) setup_value_prompt "what is your Valheim World name ? $(ColorRed 'If you already have a server, put its World name here')" 'VHSERVERWORLD' ; clear ; launcher_menu ;;
	        6) setup_value_prompt "what is your $(ColorYellow 'current') or $(ColorCyan 'wanted')  Valheim server password ?" 'VHSERVERPASSWD' ; clear ; launcher_menu ;;
			7) set_service "$VHSERVERSERVICENAME"; sleep 2 ; clear ; launcher_menu ;;
			8) uninstall_service "$VHSERVERSERVICENAME" ; clear ; launcher_menu ;;


		0) clear ; new_menu ;;
		*) echo -e $red"Wrong option."$clear; WrongCommand;;
        esac
}

# new menus
http_status_menu(){
vss_header
echo -ne "
*** VSS over HTTP menu ***
$(ColorGreen '1)') setup wanted Valheim server status over HTTP public URL (host:port)
$(ColorGreen '2)') $(ColorRed 'sudo required'), add and activate VSS.http.service (server status over HTTP)
$(ColorGreen '3)') $(ColorRed 'sudo required') remove VSS.http.service (server status over HTTP)

$(ColorGreen '0)') return to previous menu
$(ColorGreen 'CTRL+C)') quit
$(ColorBlue 'You can scroll up to see previous screens')
$(ColorBlue 'choose an option:') "
mkdir -p "$CWD/systemd"
        read a
        case $a in
			 1) setup_value_prompt 'set the public URL of your VSS over HTTP status (http://host:port) ?' 'STATUSURL' ; clear ; http_status_menu ;;
			 2) set_service "$VSSHTTPSERVICENAME"; sleep 2 ; clear ; http_status_menu ;;
			 3) uninstall_service "$VSSHTTPSERVICENAME" ; clear ; http_status_menu ;;

		0) clear ; new_menu ;;
		*) echo -e $red"Wrong option."$clear; WrongCommand;;
        esac
}

# Main menu
new_menu(){
vss_header
echo -ne "
*** Main menu ***
$(ColorGreen '1)') VSS $(ColorMagenta 'Discord') menu
$(ColorGreen '2)') VSS Launcher menu
$(ColorGreen '3)') VSS over HTTP menu

** Logs **
$(ColorBlue 'we can setup a service based on tail if you already have a your server log outputting somewhere')
$(ColorBlue 'just setup a valid logs path (wildcards accepted). Then you will not need to use the custom launcher')
$(ColorGreen '5)') setup wanted Valheim Server logs path (file or directory)
* standalone *
$(ColorGreen '6)') $(ColorRed 'sudo required') add and activate vss.pipe.service (to catch events from existings logs)
$(ColorGreen '7)') $(ColorRed 'sudo required') remove vss.pipe.service
* logrotate *
$(ColorGreen '8)') $(ColorRed 'sudo required') activate logrotate on Valheim server logs
$(ColorGreen '9)') $(ColorRed 'sudo required') remove logrotate on server logs

** Service user **
$(ColorGreen '10)') setup the user who will execute service $(ColorRed 'prior') to services install, default is $USER

** Uninstall all **
$(ColorGreen '11)') $(ColorRed 'sudo required') remove all components (crontab, logrotate, valheim-server.service, vss.http.service)

$(ColorGreen '0)') quit
$(ColorGreen 'CTRL+C)') quit
$(ColorBlue 'You can scroll up to see previous screens')
$(ColorBlue 'choose an option:') "
        read a
        case $a in
	        
			1) clear ; discord_menu ;;
			2) clear ; launcher_menu ;;
			3) clear ; http_status_menu ;;
			5) setup_value_prompt 'where are your logs (or where do you want it, file or dir, wildcards are valid) ?' 'VALHEIMSERVERLOGPATH' ; clear ; new_menu ;;
			6) set_service "$VSSPIPESERVICENAME"; sleep 2 ; clear ; new_menu ;;
			7) uninstall_service "$VSSPIPESERVICENAME" ; clear ; new_menu ;;
			8) set_logrotate ; sleep 5 ; clear ;  new_menu ;;
			9) sudo rm '/etc/logrotate.d/valheim' ; clear ; new_menu ;;
			10) setup_value_prompt 'whats the user you want to execute services ?' 'USERSERVICE' ; clear ; new_menu ;;
	     	11) replace_env_value 'CRONTABWEBHOOKFREQ' 0 ; set_cron ; sudo rm '/etc/logrotate.d/valheim' ; uninstall_service "$VHSERVERSERVICENAME" ; uninstall_service "$VSSHTTPSERVICENAME" ; clear ; new_menu ;;
		
		0) exit 0 ;;
		*) echo -e $red"Wrong option."$clear; WrongCommand;;
        esac
}

# init new menu
clear ; new_menu
